OPEN THE C FILE BEFORE READING THIS.

---

# `ft_rev_params.c` - Reverse Print Arguments Program

## Overview

The `ft_rev_params.c` program demonstrates how to reverse the order of command-line arguments and print each argument on a new line. This README provides a comprehensive explanation of the code and the programming concepts used.

## Compilation Instructions

To compile the `ft_rev_params.c` file, use the following command in your terminal:

```
gcc -Wall -Wextra -Werror ft_rev_params.c -o revparam

```

- `gcc`: The GNU Compiler Collection command for compiling C programs.

- `-Wall -Wextra -Werror`: Compiler flags that enable all warnings (`-Wall`), extra warnings (`-Wextra`), and treat warnings as errors (`-Werror`).

- `ft_rev_params.c`: The source file containing the code to be compiled.

- `-o revparam`: Specifies the name of the output executable file as `revparam`.

## Running the Program

To run the compiled program and see its output, use:

```
./revparam arg1 arg2 arg3

```

- `./revparam`: The executable file generated by the compilation process.

- `arg1`, `arg2`, `arg3`: The command-line arguments passed to the program.

### Example

If you execute:

```
./revparam hello world 42

```

The output will be:

```
42
world
hello

```

## Code Explanation

### Function `ft_putchar`

- **Purpose**: Writes a single character to the standard output.

- **Parameters**:
  - `char c`: The character to be printed.
- **System Call**: Uses the `write` system call to send the character `c` to file descriptor `1` (standard output).

### Function `main`

- **Parameters**:

  - `int argc`: The number of command-line arguments.
  - `char **argv`: An array of strings representing the command-line arguments.

- **Variable Initialization**:
  - `int i` and `int j`: Used for indexing through `argv` and characters of each argument, respectively.

- **Argument Counting**:
  - `while (argv[i]) { i++; }`: Loops through `argv` to count the number of arguments.

- **Reverse Printing**:
  - `i = i - 1;`: Adjusts the index to point to the last argument.
  
  - `while (argv[i] && i > 0)`: Loops through arguments in reverse order, skipping the program's name (`argv[0]`).
  
  - `while (argv[i][j])`: Loops through each character of the current argument and calls `ft_putchar` to print it.
  
  - `ft_putchar('\n');`: Prints a newline after each argument.
  
  - `i--; j = 0;`: Moves to the previous argument and resets the character index.

## Concepts Involved

1. **Command-Line Arguments**:
   - `argc` and `argv` are used to handle and process command-line arguments passed to the program.

2. **System Calls**:
   - `write` is a system call used to output data to the standard output.

3. **Loops**:
   - `while` loops are used to iterate through arguments and characters within arguments.

4. **Function Calls**:
   - `ft_putchar` is a custom function used to abstract away the character printing functionality.

5. **Indexing and Pointer Arithmetic**:
   - The program uses indexing to access and manipulate elements in arrays (`argv` and characters of arguments).

---
